// Generated by CoffeeScript 1.3.3
(function() {
  var extract_subdomain, format_trace;

  extract_subdomain = function(url) {
    return url.replace(/https:\/\/([\w]*)\.harvestapp.*/, '$1');
  };

  format_trace = function(trace) {
    if (trace == null) {
      return trace;
    }
    trace = trace.replace(/\n/g, '<br />');
    return trace.replace(/\(https:\/\/[\w\/\.]*\/([\w]*\.js)\?[\d]*:[\d]*:([\d]*)\)/ig, '<small>$1:$2</small>');
  };

  $(window).ready(function() {
    var exception, exceptions, groups, list, message, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    if (typeof clienterror_exceptions === "undefined" || clienterror_exceptions === null) {
      return alert('Could not find parsed exceptions file at `./exceptions.json`.');
    }
    groups = {};
    for (_i = 0, _len = clienterror_exceptions.length; _i < _len; _i++) {
      exception = clienterror_exceptions[_i];
      if (groups[exception.message] == null) {
        groups[exception.message] = [];
      }
      groups[exception.message].push(exception);
    }
    list = $('.exceptions');
    for (message in groups) {
      exceptions = groups[message];
      exceptions = exceptions.sort(function(a, b) {
        return b.time - a.time;
      });
      list.append($("<dt>\n  <h2>" + message + " <span class=\"count\">(" + exceptions.length + ")</span></h2>\n  Latest: <time>" + (new Date(exceptions[0].time)) + "</time>\n</dt>"));
      for (_j = 0, _len1 = exceptions.length; _j < _len1; _j++) {
        exception = exceptions[_j];
        list.append($("<dd>\n  <dl>\n    <dt class=\"subdomain\">Subdomain</dt>\n    <dd>" + (extract_subdomain(exception.url)) + "</dd>\n\n    <dt class=\"timestamp\">Timestamp</dt>\n    <dd><time>" + (new Date(exception.time)) + "</time></dd>\n\n    <dt class=\"url\">URL</dt>\n    <dd>" + exception.url + "</dd>\n\n    <dt class=\"browser\">Browser</dt>\n    <dd>" + ((_ref = exception.navigator) != null ? _ref.userAgent : void 0) + "</dd>\n\n    <dt class=\"platform\">Platform</dt>\n    <dd>" + ((_ref1 = exception.navigator) != null ? _ref1.platform : void 0) + "</dd>\n\n    <dt class=\"language\">Language</dt>\n    <dd>" + ((_ref2 = exception.navigator) != null ? _ref2.language : void 0) + "</dd>\n\n    <dt>Details</dt>\n    <ddt>" + exception.name + ": " + exception.type + "</dd>\n\n    <dt class=\"backtrace\">Backtrace</dt>\n    <dd>\n      <h4>Outer</h4>\n      " + (format_trace(exception.outer_backtrace)) + "\n      <h4>Inner</h4>\n      " + (format_trace(exception.backtrace)) + "\n    </dd>\n</dd>"));
      }
    }
    return console.log(groups);
  });

}).call(this);
